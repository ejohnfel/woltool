#!/usr/bin/env python3

import io
import os
import argparse
import configparser
import shutil
import subprocess
import re
import time
import csv

# Version
VERSION=(0,0,1)
Version = __version__ = ".".join([ str(x) for x in VERSION ])

#
# Variables
#

# User Config
config_file = "~/.wolable_hosts.ini"

# Host/Groups Records
hosts = dict()
groups = dict()

# MAC Expression
mac_expr = re.compile(r"^((?P<hex>[a-f0-9]{2})(\:|\-|\s){0,1}){6}$",re.I)

# Which Tool To Use
wake_tool = None

# Delay in Seconds
delay = 0

#
# Functions
#

def find_tool():
	"""Find Wol tool on System"""

	tool = shutil.which("wakeonlan")

	if tool is None:
		tool = shutil.which("etherwake")

	return tool

def make_parser():
	"""Make Parser"""

	parser = argparse.ArgumentParser(prog="wol", description="Wake host(s)")

	parser.add_argument("-c", "--config", help="Load alternate config file")
	parser.add_argument("-v", "--version", action="store_true", help="Show version")
	parser.add_argument("-d", "--delay", help="Delay between WOLs when executing more than one")
	parser.add_argument("-l", "--list", action="store_true", help="List items in config")
	parser.add_argument("-f", "--file", help="WOL MAC Addresses in file, one MAC Address per line")
	parser.add_argument("-a", "--add", help="Add host to config file [host,macaddr]")
	parser.add_argument("--bulkadd", help="Bulk add hosts [host,mac] csv file")
	parser.add_argument("-r", "--remove", help="Remove host from config")
	parser.add_argument("--bulkremove", help="Bulk remove from config")
	parser.add_argument("-g", "--group", help="Add group, [groupname=host1,host2,...]")
	parser.add_argument("--groupadd", help="Add host to group, [groupname=host]")
	parser.add_argument("--groupdel", help="Delete host from group, [groupname=host]")
	parser.add_argument("--delgroup", help="Delete group")
	parser.add_argument("--convert", help="Convert old style wol host file into config")
	parser.add_argument("--test", action="store_true", help="Enter test mode")
	parser.add_argument("host", nargs="*", help="Host(s) to wake up")

	return parser

def save_config(filename=None):
	"""Save Config File"""

	global hosts, groups

	config = configparser.ConfigParser()

	config["hosts"] = hosts
	config["groups"] = {}
	config["settings"] = {}

	for groupname,hosts in groups.items():
		config["groups"][groupname] = ",".join(hosts)

	if filename is None:
		filename = config_file

	fname = os.path.expanduser(filename)

	with open(fname,"w") as configfile:
		config.write(configfile)

def load_config(filename=None):
	"""Load A Config File"""

	global hosts, groups

	config = configparser.ConfigParser()

	if filename is None:
		filename = config_file

	fname = os.path.expanduser(filename)

	if os.path.exists(fname):
		config.read(fname)

		# Transition Config to internal data structures

		settings = config["settings"]

		for groupname in config["groups"]:
			grouphosts = config["groups"][groupname]

			groups[groupname] = grouphosts.split(",")

		for hostname in config["hosts"]:
			macaddr = config["hosts"][hostname]

			hosts[hostname] = macaddr
	else:
		print(f"No config exists, creating it in {filename}")
		save_config(filename)

def list_hosts():
	"""List hosts In Config"""

	global hosts, groups

	print("\nHosts\n=====")

	hostnames = list(hosts.keys())
	hostnames.sort()

	for host in hostnames:
		mac = hosts[host]
		print(f"{host:<25}{mac}")

	if len(hosts) == 0:
		print("I have no hosts at the moment")

	print("\nGroups\n======")

	groupnames = list(groups.keys())
	groupnames.sort()

	for groupname in groupnames:
		grouphosts = groups[groupname]
		print(f"{groupname:<25}{grouphosts}")

	if len(groups) == 0:
		print("I have no groups at the moment")

def add_host(host, macaddr=None, auto_save=True):
	"""Add Host To Config File"""

	if macaddr is None:
		host, macaddr = host.split(",")

	if host not in hosts:
		hosts[host] = macaddr

	if auto_save:
		save_config()

def bulk_add(filename):
	"""Bulk Add Hosts To Config"""

	if os.path.exists(filename):
		with open(filename,"r",newline='') as fin:
			reader = csv.reader(fin)

			for row in reader:
				host = row[0]
				mac = row[1]

				add_host(host, mac, False)

		save_config()
	else:
		print(f"{filename} does not exist")

def remove_host(host, auto_save=True):
	"""Remove Host From Config"""

	if host in hosts:
		del hosts[host]

	for groupname in groups.keys():
		if host in groups[groupname]:
			groups[groupname].remove(host)

	if auto_save:
		save_config()

def bulk_remove(filename):
	"""Bulk Remove Hosts From Config"""

	if os.path.exists(filename):
		with open(filename,"r",newline='') as fin:
			for host in fin:
				remove_host(host,False)

		save_config()
	else:
		print(f"{filename} does not exist")

def add_group(groupname, hosts):
	"""Add Group"""

	if groupname not in groups:
		groups[groupname] = hosts

		save_config()

def remove_group(groupname):
	"""Remove Group"""

	if groupname in groups:
		del groups[groupname]

		save_config()

def add_to_group(groupname, host):
	"""Add Host To Group"""

	if groupname in groups:
		grouphosts = groups[groupname]

		if host not in groups[groupname]:
			groups[groupname].append(host)

			save_config()
	else:
		add_group(groupname,[ host ])

def remove_from_group(groupname, host):
	"""Remove host from Group"""

	if groupname in groups:
		if host in groups[groupname]:
			groups[groupname].remove(host)

			save_config()

def convert_old(filename):
	"""Convert Old Style Config to New Config"""

	if os.path.exists(filename):
		with open(filename,"r",newline='') as fin:
			reader = csv.reader(fin,delimiter=" ")

			for row in reader:
				host = row[0]
				macaddr = row[1]
				platform = row[2]
				hostname = row[3]

				add_host(host,macaddr,False)

			save_config()
	else:
		print(f"{filename} does not exist")

def set_delay(delay_str):
	"""Set Delay from String"""

	global delay

	sym_expr = re.compile("^[0-9]+(s|m|h)$")

	if sym_expr.search(delay_str):
		factor = 1
		factor_str = delay_str[-1]
		delay_value = int(delay_str[0:-1])

		if factor_str == "m":
			factor = 60
		elif factor_str == "h":
			factor = (60 * 60)

		delay = (delay_value * factor)
	else:
		delay = int(delay_str)

def wol_host(items):
	"""Wake Host"""

	global wake_tool, delay

	host_list = list()

	if type(items) is list:
		host_list.extend(items)
	else:
		host_list.append(items)

	for host in host_list:
		if host in hosts:
			macaddr = hosts[host]

			if mac_expr.search(macaddr) is not None:
				print(f"WoL-ing {host}/{macaddr}... ",end="",flush=True)
				result = subprocess.run([wake_tool, macaddr])

				if wake_tool == "wakeonlan":
					print("")

				if result.returncode != 0:
					print(f"Something went wrong : {result.returncode}")

				if delay > 0:
					print(f"Sleeping {delay} seconds")
					time.sleep(delay)
			else:
				print(f"{macaddr} is not a valid mac address")
		elif host in groups:
			grouphosts = groups[host]

			print(f"Waking group : {host}")
			for host in grouphosts:
				wol_host(host)
		elif mac_expr.search(host):
			macaddr = re.sub("[\s\-]", ":", host, count=5)
		else:
			print(f'"{host}" not in config or not a valid MAC Address')

def test(args):
	"""Test Function"""

	breakpoint()

	pass

#
# Main Loop
#

if __name__ == "__main__":
	imported_macs = list()

	parser = make_parser()

	args = parser.parse_args()

	if args.config is not None:
		config_file = args.config

	if args.delay is not None:
		set_delay(args.delay)

	if args.file is not None:
		if os.path.exists(args.file):
			with open(file,"rt") as fin:
				count = 1

				for line in fin:
					macaddr = line.trim()

					imported_macs.append(macaddr)

					count += 1
		else:
			print(f"{file} does not exist")

	load_config(config_file)

	if args.test:
		test(args)
	elif args.version:
		print(f"Wol tool : {Version}")
	elif args.convert is not None:
		convert_old(args.convert)
	elif args.list:
		list_hosts()
	elif args.add is not None:
		add_host(args.add)
	elif args.bulkadd is not None:
		bulk_add(args.bulkadd)
	elif args.remove is not None:
		remove_host(args.remove)
	elif args.bulkremove is not None:
		bulk_remove(args.bulkremove)
	elif args.group is not None:
		groupname,grouphosts = args.group.split("=")
		grouphosts = grouphosts.split(",")

		add_group(groupname,grouphosts)
	elif args.groupadd is not None:
		groupname,host = args.groupadd.split("=")
		add_to_group(groupname,host)
	elif args.groupdel is not None:
		groupname,host = args.groupdel.split("=")
		remove_from_group(groupname,host)
	elif args.delgroup is not None:
		remove_group(args.groupname)
	else:
		wake_tool = find_tool()

		if wake_tool is not None:
			if len(imported_macs) > 0:
				wol_host(imported_macs)

			for host in args.host:
				wol_host(host)
		else:
			print("It appears neither X or Y are installed, so I can't wake anything")
			print("Consider installing wakeonlan or etherwake")
